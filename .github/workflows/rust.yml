name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Format
      run: cargo fmt --check
      
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-all-features
    - name: Check all feature combinations
      run: cargo check-all-features
      
  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Clippy
      run: cargo clippy -- -D warnings
      
  test:
    needs: format
    strategy:
      matrix:
        toolchain: [stable, beta]
        os: [ubuntu-latest, macos-latest, windows-latest]
        chunk: [1, 2, 3]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-all-features
    - name: Test all feature combinations
      run: cargo test-all-features --n-chunks 3 --chunk ${{ matrix.chunk }}
      
  build:
    needs: format
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-all-features
    - name: Build normal feature combinations
      run: cargo build-all-features
    - name: Build binary
      run: cargo build --features binary
      
  doc:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
      RUSTDOCFLAGS: --cfg docsrs
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: Document
      run: cargo +nightly doc --features macro,std,serde,rkyv
      
  coverage:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools
      - name: Cache
        uses: Swatinem/rust-cache@v2.8.0
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: cargo llvm-cov --locked -F macro --lcov --output-path lcov.info
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          fail_ci_if_error: true
          
  semver-checks:
    needs: format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Cache
        uses: Swatinem/rust-cache@v2.8.0
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-semver-checks
      - name: Verify semver compatibility
        run: cargo semver-checks

  miri:
    needs: format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri,rust-src
    - name: Run miri
      run: cargo +nightly miri test --all-features

  no_std:
    needs: format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [thumbv7m-none-eabi, aarch64-unknown-none]
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}
    - name: Cache
      uses: Swatinem/rust-cache@v2.8.0
    - name: Check
      run: cargo check --target ${{ matrix.target }}
    - name: Check with rkyv
      run: cargo check --target ${{ matrix.target }} --features rkyv
    - name: Check with serde
      run: cargo check --target ${{ matrix.target }} --features serde
    - name: Check with both
      run: cargo check --target ${{ matrix.target }} --features rkyv,serde
